Writing a good program is like describing how a machine works to someone who's never seen it. Generally people make three mistakes when doing this:

1. Verbosity. Describing every single little detail of the machine, every path it might take individually. You can save a lot of time by introducing abstractions, so that similar cases only need to be described once. Otherwise the listener will have trouble keeping the thing in their heads.

2. Over-abstraction. Overcomplicating the description of the machine and its abstractions, telling the listener not only what the machine is, but what it might become. Aka over-engineering. The listener often does not care about your grand plan for the machine over the next 10 years, they just want to know what it does. However, if they are going to be repairing or improving the machine, some of your wisdom might be warranted. This is closer to an art.

3. Incoherence. While describing the machine, jumping constantly between descriptions of different parts of the machine. Aka spaghetti code. Linearity in descriptions is highly desirable.

In general, we want to be able to succinctly say what the machine does. If the listener is so inclined, the parts of the explanation should be structured such that expounding on any one part is natural and direct.

A fun class activity for this might involve building something with kinects. Except only half the team knows what the task is, and writes instructions for the other half of the team to build it. Like a rollercoaster or something. Points awarded for length of rollercoaster, but the built thing must match the original team's model *exactly*, else no points.
